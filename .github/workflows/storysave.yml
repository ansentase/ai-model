name: Generate Story with Hugging Face

on:
  workflow_dispatch:

jobs:
  run-inline-python:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests

      - name: Run inline Python script with Hugging Face API and save to file
        env:
          HF_API_TOKEN: ${{ secrets.HF_API_TOKEN }}
        run: |
          python3 - <<EOF > generated_story.txt
import requests
import json
import re
import time
import os

url = "https://api-inference.huggingface.co/models/mistralai/Mixtral-8x7B-Instruct-v0.1"
headers = {
    "Authorization": f"Bearer {os.environ['HF_API_TOKEN']}",
    "Content-Type": "application/json"
}

outline_points = [
    "Protagonist receives a mysterious letter with no return address.",
    "The letter warns of a danger that will strike in 24 hours.",
    "Protagonist initially ignores it but strange events start happening.",
    "Protagonist decides to investigate the letter further.",
    "An unexpected ally appears to help the protagonist.",
    "Danger escalates forcing protagonist to flee.",
    "Secrets about protagonist’s past are revealed.",
    "Climax confrontation with antagonist.",
    "Protagonist overcomes the threat but at a cost.",
    "Resolution and new beginning for protagonist."
]

def clean_story_output(raw_text):
    lines = raw_text.splitlines()
    cleaned_lines = []
    skip_patterns = [
        r'^\\s*(\\*+|---+|###*|Point \\d+.*|End of.*|Preparation for.*|Continuity Notes.*|Please Provide.*|Generating story.*|Context.*|Tone:.*|Events:.*|Character Development:.*|NOTE:.*)',
        r'.*outline.*'
    ]
    for line in lines:
        if any(re.match(pattern, line, re.IGNORECASE) for pattern in skip_patterns):
            continue
        if "NOTE:" in line or line.strip().endswith(":"):
            continue
        cleaned_lines.append(line)
    return '\\n'.join(cleaned_lines).strip()

def generate_story_part(point, context, is_first=False, is_last=False):
    if is_first:
        prompt = f"You are a professional storyteller.\\nBegin the story from scratch using the outline point below.\\nThis is the very beginning, so introduce the protagonist, setting, and tone naturally.\\nOutline Point: {point}\\n\\nWrite at least 500 words for this section.\\nMake sure to set the stage clearly and begin the narrative with no assumed prior events.\\nPlease ONLY provide the story narrative in plain text.\\n"
    elif is_last:
        prompt = f"You are a professional storyteller.\\nUse the outline point below to write the final part of the story.\\nThis is the ending, so conclude the narrative in a satisfying and emotionally resonant way.\\nTie up any loose threads and reflect on the protagonist’s journey.\\nOutline Point: {point}\\n\\nPrevious Story Context:\\n{context}\\n\\nWrite at least 500 words for this section.\\n"
    else:
        prompt = f"You are a professional storyteller.\\nBased on the outline point below, continue the story coherently using the context provided.\\nOutline Point: {point}\\n\\nPrevious Story Context:\\n{context}\\n\\nWrite at least 500 words for this section.\\n"

    payload = {
        "inputs": prompt,
        "parameters": {
            "max_new_tokens": 1024,
            "do_sample": True,
            "temperature": 0.7,
            "top_k": 50,
            "top_p": 0.95
        }
    }

    response = requests.post(url, headers=headers, data=json.dumps(payload))
    if response.status_code == 200:
        try:
            generated = response.json()[0]['generated_text']
            if generated.startswith(prompt):
                generated = generated[len(prompt):]
            return clean_story_output(generated)
        except Exception as e:
            print("Error parsing response:", e)
            return None
    else:
        print(f"Error {response.status_code}: {response.text}")
        return None

def main():
    full_story = ""

    for idx, point in enumerate(outline_points, start=1):
        print(f"--- Generating story part {idx} ---")
        is_first = idx == 1
        is_last = idx == len(outline_points)
        story_part = generate_story_part(point, full_story, is_first=is_first, is_last=is_last)
        if story_part:
            print(story_part)
            print("\\n")
            full_story += "\\n" + story_part
            time.sleep(1)
        else:
            print(f"Failed to generate part {idx}. Stopping.")
            break

    print("--- FULL STORY GENERATED ---")
    print(full_story)

if __name__ == "__main__":
    main()
EOF

      - name: Commit and push generated story file
        env:
          GH_PAT: ${{ secrets.GH_PAT }}
        run: |
          git config user.name "ansentase"
          git config user.email "samomsan7@gmail.com"
          git add generated_story.txt
          git commit -m "Add generated story"
          git push https://ansentase:${GH_PAT}@github.com/ansentase/ai-model.git HEAD:main
